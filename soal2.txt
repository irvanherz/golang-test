package main

import (
	"fmt"
	"strconv"
)

type Mystery struct {
	str   string
	index int
}

func (m *Mystery) init(str string) {
	m.str = str
	m.index = 0
}

func (m *Mystery) get(length int) int {
	a := m.index
	b := m.index + length

	if b > len(m.str) {
		return -1
	}
	val, _ := strconv.Atoi(m.str[a:b])
	return val
}

func (m *Mystery) skip(length int) {
	m.index += length
}

func countDigits(i int) (count int) {
	for i != 0 {
		i /= 10
		count = count + 1
	}
	return count
}

func (m *Mystery) scan() []int {
	var r []int
	ndigits := 1
begin:
	c := m.get(ndigits)
	if c == -1 {
		goto end
	}
	m.skip(ndigits)
	for {
		g1 := c + 1
		g2 := c + 2
		nlen := countDigits(g1)
		n := m.get(nlen)
		if n > 1000000 {
			goto end
		}
		if n == g1 {
			c = g1
			if c == -1 {
				goto end
			}
			m.skip(nlen)
			continue
		} else {
			nlen = countDigits(g2)
			n = m.get(nlen)
			if n == g2 {
				c = g2
				r = append(r, g1)
				m.skip(nlen)
				continue
			} else {
				m.index = 0
				ndigits++
				goto begin
			}

		}
	}
end:
	return r
}

func main() {
	m := new(Mystery)
	n := new(Mystery)
	//m = 91011 91012 91013 91015 91016 91018 91019
	//n = 8 9 11 12 13 15
	m.init("91011910129101391015910169101891019")
	n.init("8911121315")
	mr := m.scan()
	nr := n.scan()

	fmt.Printf("\nMissing nums of '%s': ", m.str)
	for i := 0; i < len(mr); i++ {
		fmt.Print(mr[i], " ")
	}
	fmt.Printf("\nMissing nums of '%s': ", n.str)
	for i := 0; i < len(nr); i++ {
		fmt.Print(nr[i], " ")
	}
}
